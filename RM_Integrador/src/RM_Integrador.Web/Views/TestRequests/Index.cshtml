@{
    ViewData["Title"] = "Teste de Requisi√ß√µes";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Teste de Requisi√ß√µes - Sistema de Automa√ß√£o DataServer BH</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/spinner.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        body { 
            background-color: #f8f9fa;
            min-height: 100vh;
            padding: 2rem 0;
        }

        .json-display {
            font-family: 'Consolas', monospace;
            font-size: 14px;
            line-height: 1.5;
            white-space: pre-wrap;
        }

        .loading-text {
            display: none;
            text-align: center;
            margin-top: 10px;
            color: #666;
        }

        /* Success/Error messages */
        .alert {
            position: relative;
            z-index: 2;
            padding: 0.75rem 1.25rem;
        }

        /* Estilo para campos de chaves prim√°rias */
        .primary-key-input {
            border-left: 4px solid #007bff;
        }

        .primary-key-input:focus {
            border-left-color: #0056b3;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .json-preparation-area {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
        }

        #prepared-json {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            border: 2px solid #dee2e6;
        }

        #prepared-json:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <a href="/User/Menu" class="btn btn-outline-primary mb-3">‚Üê Voltar ao Menu</a>
        <h2>Teste de Requisi√ß√µes para DataServers</h2>
    
    <!-- Alert container for success/error messages -->
    <div id="alert-container"></div>

    <!-- Loading indicator -->
    <div id="loading-container" class="text-center" style="display: none;">
        <div class="spinner request-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
        </div>
        <div class="loading-text">Processando requisi√ß√£o...</div>
    </div>

    <!-- Status da conex√£o RM -->
    <div id="rm-connection-status" class="alert alert-info">
        <i class="fas fa-info-circle"></i> Detectando RM local...
    </div>

    <!-- Informa√ß√µes de Ambiente -->
    <div class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-server"></i> Informa√ß√µes do Ambiente</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Ambiente:</strong> <span id="env-environment" class="badge bg-secondary">Carregando...</span></p>
                    <p><strong>RM Local Dispon√≠vel:</strong> <span id="env-local-rm">-</span></p>
                </div>
                <div class="col-md-6">
                    <p><strong>URL Atual do RM:</strong> <br><small id="env-current-url" class="text-break">-</small></p>
                    <p><strong>Portas Dispon√≠veis:</strong> <span id="env-ports">-</span></p>
                </div>
            </div>
            <div class="text-end">
                <a href="/Environment" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-cog"></i> Configura√ß√µes Avan√ßadas
                </a>
            </div>
        </div>
    </div>

    <!-- Configura√ß√µes de Execu√ß√£o -->
    <div class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-cogs"></i> Configura√ß√µes de Execu√ß√£o</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Modo de Execu√ß√£o:</label>
                    <select id="executionMode" class="form-select">
                        <option value="auto">üîÑ Autom√°tico (Detectar melhor op√ß√£o)</option>
                        <option value="local">üè† For√ßar RM Local</option>
                        <option value="server">üåê Apenas Servidor</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">A√ß√µes:</label>
                    <div class="d-flex gap-2">
                        <button id="redetectRMBtn" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-sync"></i> Re-detectar RM
                        </button>
                        <button id="showRMStatusBtn" class="btn btn-outline-info btn-sm">
                            <i class="fas fa-info"></i> Status
                        </button>
                        <button class="btn btn-outline-primary btn-sm" data-bs-toggle="modal" data-bs-target="#rmCredentialsModal">
                            <i class="fas fa-key"></i> Credenciais
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- DataServer Selection -->
    <div class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-database"></i> Sele√ß√£o do DataServer</h5>
        </div>
        <div class="card-body">
            <div class="input-group">
                <input type="text" id="dataServerInput" class="form-control" placeholder="Nome do DataServer">
                <button id="selectDataServerBtn" class="btn btn-primary" type="button">Buscar</button>
            </div>
        </div>
    </div>

    <!-- DataServer Info -->
    <div id="dataServerInfo" style="display: none;" class="alert alert-success">
        <!-- Informa√ß√µes do DataServer ser√£o exibidas aqui -->
    </div>

    <!-- Operation Type Selection -->
    <div id="operationTypeSection" style="display: none;" class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-tools"></i> Tipo de Opera√ß√£o</h5>
        </div>
        <div class="card-body">
            <p>Escolha o tipo de opera√ß√£o para o DataServer selecionado:</p>
            <div class="d-flex gap-3">
                <button id="showGetOptionsBtn" class="btn btn-info btn-lg">
                    <i class="fas fa-download me-2"></i> GET - Consultar Dados
                </button>
                <button id="showPostOptionsBtn" class="btn btn-primary btn-lg">
                    <i class="fas fa-upload me-2"></i> POST - Enviar Dados
                </button>
            </div>
        </div>
    </div>

    <!-- Operations Section -->
    <div id="operationsSection" style="display: none;">
        <!-- GET Options -->
        <div id="getOptions" style="display: none;" class="card mb-4">
            <div class="card-header">
                <h5><i class="fas fa-download"></i> Configura√ß√µes GET</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="getFilter" class="form-label">Filtro ou ID espec√≠fico:</label>
                    <input type="text" id="getFilter" class="form-control" placeholder="Ex: 1$_$00001 (ID espec√≠fico) ou name=teste (filtro)">
                    <div class="form-text">
                        <small>
                            <strong>ID espec√≠fico:</strong> Use IDs como "1$_$00001" para acessar um registro espec√≠fico.<br>
                            <strong>Filtro:</strong> Use "campo=valor" para filtrar resultados.
                        </small>
                    </div>
                </div>
                <button class="btn btn-info" onclick="executeGet()">Executar GET</button>
            </div>
        </div>

        <!-- POST Options -->
        <div id="postOptions" style="display: none;" class="card mb-4">
            <div class="card-header">
                <h5><i class="fas fa-upload"></i> Configura√ß√µes POST</h5>
            </div>
            <div class="card-body">
                <p>Escolha como deseja preparar os dados para envio:</p>
                <div class="d-grid gap-2">
                    <button class="btn btn-primary" onclick="preparePost()">üìã Preparar JSON</button>
                </div>
                <small class="text-muted">Use o modo "Preparar JSON" para construir o JSON de forma assistida.</small>
            </div>
        </div>

        <!-- JSON Preparation Area -->
        <div id="jsonPreparationArea" style="display: none;" class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-code"></i> Prepara√ß√£o do JSON</h5>
                <div>
                    <button class="btn btn-success" onclick="sendPreparedJson()">
                        <i class="fas fa-paper-plane"></i> Enviar JSON
                    </button>
                    <button class="btn btn-outline-primary" onclick="saveJsonLocally()">
                        <i class="fas fa-save"></i> Salvar JSON
                    </button>
                    <button class="btn btn-outline-secondary" onclick="formatJsonInTextarea()">
                        <i class="fas fa-magic"></i> Formatar
                    </button>
                    <button class="btn btn-outline-warning" onclick="goBackToKeys()">
                        <i class="fas fa-arrow-left"></i> Voltar
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div id="json-inputs-container">
                    <!-- Inputs de chaves ser√£o gerados aqui -->
                </div>
                <div class="mt-3">
                    <label for="prepared-json" class="form-label">JSON Final:</label>
                    <textarea id="prepared-json" class="form-control" rows="10" placeholder="O JSON preparado aparecer√° aqui..."></textarea>
                    <div class="mt-2">
                        <button class="btn btn-outline-info btn-sm" onclick="testTextareaContent()">
                            <i class="fas fa-eye"></i> Testar Conte√∫do da Textarea
                        </button>
                        <button class="btn btn-outline-warning btn-sm" onclick="validateJsonForDataServer()">
                            <i class="fas fa-check-circle"></i> Validar JSON para DataServer
                        </button>
                        <button class="btn btn-outline-primary btn-sm" onclick="copyJsonToClipboard()">
                            <i class="fas fa-copy"></i> Copiar JSON
                        </button>
                        <button class="btn btn-outline-success btn-sm" onclick="testJsonInPostman()">
                            <i class="fas fa-external-link-alt"></i> Instru√ß√µes Postman
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div id="resultSection" style="display: none;" class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5><i class="fas fa-chart-line"></i> Resultado da Requisi√ß√£o</h5>
            <div>
                <button class="btn btn-outline-primary" onclick="backToMain()">
                    <i class="fas fa-home"></i> Nova Consulta
                </button>
                <button class="btn btn-outline-secondary" onclick="saveResult()">
                    <i class="fas fa-save"></i> Salvar
                </button>
            </div>
        </div>
        <div class="card-body">
            <div id="result" class="json-display border p-3 bg-light">
                <!-- Resultado ser√° exibido aqui -->
            </div>
        </div>
    </div>
    </div>

    <!-- Modal para Configura√ß√£o de Credenciais RM Local -->
    <div class="modal fade" id="rmCredentialsModal" tabindex="-1" aria-labelledby="rmCredentialsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rmCredentialsModalLabel">
                        <i class="fas fa-key"></i> Configurar Credenciais RM Local
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="rmUsername" class="form-label">Usu√°rio:</label>
                        <input type="text" class="form-control" id="rmUsername" placeholder="Nome de usu√°rio do RM">
                    </div>
                    <div class="mb-3">
                        <label for="rmPassword" class="form-label">Senha:</label>
                        <input type="password" class="form-control" id="rmPassword" placeholder="Senha do RM">
                    </div>
                    <div class="mb-3">
                        <label for="rmCodColigada" class="form-label">C√≥digo da Coligada:</label>
                        <input type="number" class="form-control" id="rmCodColigada" value="1" min="1">
                    </div>
                    <div class="text-end mb-3">
                        <button type="button" class="btn btn-outline-primary" onclick="testRMCredentials()">
                            <i class="fas fa-check"></i> Testar
                        </button>
                        <button type="button" class="btn btn-outline-secondary" onclick="clearRMCredentials()">
                            <i class="fas fa-trash"></i> Limpar
                        </button>
                    </div>
                    <div id="credentialsTestResult"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" onclick="saveRMCredentials()">
                        <i class="fas fa-save"></i> Salvar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Fun√ß√£o para detectar RM local no browser do usu√°rio
        async function detectLocalRMInBrowser() {
            const ports = [8051, 8052, 8053];
            
            for (const port of ports) {
                try {
                    const url = `http://localhost:${port}/rmsrestdataserver/rest`;
                    console.log(`Tentando detectar RM local em: ${url}`);
                    
                    // Usar uma requisi√ß√£o simples para testar conectividade
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 2000);
                    
                    // Testa com um endpoint mais simples
                    const response = await fetch(url, {
                        method: 'GET',
                        signal: controller.signal,
                        mode: 'cors', // Permite verificar resposta adequadamente
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    clearTimeout(timeoutId);
                    
                    // Se chegou at√© aqui sem erro, o RM est√° acess√≠vel
                    console.log(`RM local detectado em: ${url} - Status: ${response.status}`);
                    return url;
                    
                } catch (error) {
                    console.log(`RM n√£o encontrado na porta ${port}: ${error.message}`);
                    // Se o erro n√£o for de timeout/abort, pode ser que o servi√ßo n√£o esteja rodando
                    if (error.name === 'AbortError') {
                        console.log(`Timeout na porta ${port}`);
                    }
                }
            }
            
            console.log('Nenhum RM local detectado');
            return null;
        }

        // Fun√ß√£o para mostrar alertas
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alert-container');
            const alertId = 'alert-' + Date.now();
            
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" id="${alertId}" role="alert">
                    ${message}
                    <button type="button" class="btn-close" onclick="closeAlert('${alertId}')"></button>
                </div>
            `;
            
            alertContainer.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove ap√≥s 5 segundos
            setTimeout(() => {
                closeAlert(alertId);
            }, 5000);
        }

        // Fun√ß√£o para fechar alertas
        function closeAlert(alertId) {
            const alert = document.getElementById(alertId);
            if (alert) {
                alert.remove();
            }
        }

        // Fun√ß√£o para carregar informa√ß√µes do ambiente
        async function loadEnvironmentInfo() {
            try {
                const response = await fetch('/TestRequests/GetEnvironmentInfo');
                const data = await response.json();
                
                if (data.success) {
                    const info = data.data;
                    document.getElementById('env-environment').textContent = info.environment || 'Desenvolvimento';
                    document.getElementById('env-local-rm').textContent = info.hasLocalRM ? 'Sim' : 'N√£o';
                    document.getElementById('env-current-url').textContent = info.currentRMUrl || 'N√£o detectado';
                    document.getElementById('env-ports').textContent = info.availablePorts?.join(', ') || 'Nenhuma';
                }
            } catch (error) {
                console.error('Erro ao carregar informa√ß√µes do ambiente:', error);
            }
        }

        // Fun√ß√£o para detectar RM local/remoto
        async function redetectRM() {
            const statusElement = document.getElementById('rm-connection-status');
            statusElement.className = 'alert alert-info';
            statusElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Detectando RM...';
            
            try {
                const response = await fetch('/TestRequests/DetectRM');
                const data = await response.json();
                
                if (data.success) {
                    const rmInfo = data.data;
                    let statusClass = 'alert-success';
                    let icon = 'fas fa-check-circle';
                    let message = '';
                    
                    if (rmInfo.isLocal) {
                        message = `<i class="${icon}"></i> RM Local detectado na porta ${rmInfo.port}`;
                    } else {
                        message = `<i class="${icon}"></i> Usando RM Remoto: ${rmInfo.remoteUrl}`;
                    }
                    
                    statusElement.className = `alert ${statusClass}`;
                    statusElement.innerHTML = message;
                    
                    // Atualiza informa√ß√µes do ambiente
                    if (rmInfo.isLocal !== undefined) {
                        document.getElementById('env-local-rm').textContent = rmInfo.isLocal ? 'Sim' : 'N√£o';
                    }
                } else {
                    statusElement.className = 'alert alert-warning';
                    statusElement.innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${data.message}`;
                }
            } catch (error) {
                statusElement.className = 'alert alert-danger';
                statusElement.innerHTML = '<i class="fas fa-times-circle"></i> Erro ao detectar RM: ' + error.message;
            }
        }

        function showRMStatus() {
            // Implementar l√≥gica para mostrar status detalhado do RM
            alert('Fun√ß√£o de status do RM ser√° implementada');
        }

        // Fun√ß√£o para selecionar DataServer
        async function selectDataServer() {
            const term = document.getElementById('dataServerInput').value;
            if (!term || term.trim() === '') {
                alert('Digite o nome do DataServer');
                return;
            }
            
            console.log('Buscando DataServer:', term);
            
            try {
                const response = await fetch(`/User/BuscarJsonsExemplos?dataServerName=${encodeURIComponent(term)}`);
                const data = await response.json();
                
                if (data.success) {
                    console.log('DataServer encontrado:', data.data);
                    
                    // Exibe informa√ß√µes do DataServer
                    const infoDiv = document.getElementById('dataServerInfo');
                    infoDiv.innerHTML = `
                        <strong>DataServer encontrado:</strong> ${term}<br>
                        <small>Clique em uma das op√ß√µes abaixo para continuar.</small>
                    `;
                    infoDiv.style.display = 'block';
                    
                    // Mostra as op√ß√µes de opera√ß√£o
                    document.getElementById('operationTypeSection').style.display = 'block';
                    
                    // Armazena os dados para uso posterior - usando o termo pesquisado como nome
                    window.selectedDataServer = {
                        name: term,
                        data: data.data
                    };
                    
                    console.log('DataServer salvo:', window.selectedDataServer);
                    
                    alert('DataServer encontrado com sucesso!');
                } else {
                    alert(data.message || 'DataServer n√£o encontrado');
                }
            } catch (error) {
                console.error('Erro ao buscar DataServer:', error);
                alert('Erro ao buscar DataServer: ' + error.message);
            }
        }

        // Fun√ß√£o para mostrar op√ß√µes GET
        function showGetOptions() {
            console.log('Mostrando op√ß√µes GET');
            if (!window.selectedDataServer) {
                alert('Primeiro selecione um DataServer');
                return;
            }
            
            document.getElementById('operationsSection').style.display = 'block';
            document.getElementById('getOptions').style.display = 'block';
            document.getElementById('postOptions').style.display = 'none';
            document.getElementById('jsonPreparationArea').style.display = 'none';
        }

        // Fun√ß√£o para mostrar op√ß√µes POST
        function showPostOptions() {
            console.log('Mostrando op√ß√µes POST');
            if (!window.selectedDataServer) {
                alert('Primeiro selecione um DataServer');
                return;
            }
            
            document.getElementById('operationsSection').style.display = 'block';
            document.getElementById('getOptions').style.display = 'none';
            document.getElementById('postOptions').style.display = 'block';
            document.getElementById('jsonPreparationArea').style.display = 'none';
        }

        // Fun√ß√£o para executar GET
        async function executeGet() {
            if (!window.selectedDataServer) {
                alert('Primeiro selecione um DataServer');
                return;
            }
            
            console.log('Executando GET para:', window.selectedDataServer);
            
            const filter = document.getElementById('getFilter').value;
            const dataServerName = window.selectedDataServer.name;
            const executionMode = document.getElementById('executionMode').value;
            
            console.log('Nome do DataServer:', dataServerName);
            console.log('Filtro:', filter);
            console.log('Modo de execu√ß√£o:', executionMode);
            
            if (!dataServerName) {
                alert('Nome do DataServer n√£o est√° definido');
                return;
            }
            
            try {
                document.getElementById('loading-container').style.display = 'block';
                
                // Se for modo local, tentar detectar RM local no browser do usu√°rio
                let actualExecutionMode = executionMode;
                let localRMUrl = null;
                
                if (executionMode === 'local') {
                    console.log('üîç Detectando RM local no browser do usu√°rio...');
                    showAlert('üîç Detectando RM local no seu computador...', 'info');
                    localRMUrl = await detectLocalRMInBrowser();
                    
                    if (!localRMUrl) {
                        document.getElementById('loading-container').style.display = 'none';
                        showAlert('‚ùå RM local n√£o detectado no seu computador. Verifique se o RM est√° executando localmente nas portas 8051, 8052 ou 8053.', 'danger');
                        return;
                    }
                    
                    console.log('‚úÖ RM local detectado:', localRMUrl);
                    showAlert(`‚úÖ RM local detectado: ${localRMUrl}`, 'success');
                } else {
                    console.log('üåê Modo remoto selecionado - usando servidor configurado');
                    showAlert('üåê Usando RM remoto (servidor)', 'info');
                }
                
                const requestData = {
                    dataServerName: dataServerName,
                    filter: filter || '',
                    executionMode: actualExecutionMode,
                    localRMUrl: localRMUrl // Passa a URL do RM local detectado
                };
                
                console.log('Dados da requisi√ß√£o:', requestData);
                
                const response = await fetch('/TestRequests/ExecuteGet', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });
                
                const data = await response.json();
                
                console.log('Resposta da API:', data);
                
                document.getElementById('loading-container').style.display = 'none';
                
                if (data.success) {
                    document.getElementById('resultSection').style.display = 'block';
                    
                    // Formata√ß√£o melhorada do JSON
                    let formattedData = data.data;
                    try {
                        // Se data.data √© uma string JSON, parse e reformate
                        if (typeof data.data === 'string') {
                            const parsedData = JSON.parse(data.data);
                            formattedData = JSON.stringify(parsedData, null, 2);
                        } else {
                            // Se j√° √© objeto, apenas stringify com formata√ß√£o
                            formattedData = JSON.stringify(data.data, null, 2);
                        }
                    } catch (e) {
                        // Se falhar, usa o valor original
                        formattedData = data.data;
                    }
                    
                    document.getElementById('result').innerHTML = `<pre style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; border: 1px solid #dee2e6;">${formattedData}</pre>`;
                    
                    // Mostra qual URL foi usada com informa√ß√µes detalhadas
                    let urlInfo = '';
                    if (data.executionDetails) {
                        urlInfo = ` | ${data.executionDetails}`;
                    } else if (data.usedUrl && data.executionMode) {
                        const modeText = data.executionMode === 'local' ? 'RM Local' : 'RM Remoto';
                        urlInfo = ` | ${modeText}: ${data.usedUrl}`;
                    } else if (data.usedUrl) {
                        urlInfo = ` | URL: ${data.usedUrl}`;
                    }
                    
                    showAlert(`‚úÖ Requisi√ß√£o GET executada com sucesso!${urlInfo}`, 'success');
                } else {
                    showAlert('Erro na requisi√ß√£o GET: ' + (data.message || data.error || 'Erro desconhecido'), 'danger');
                }
            } catch (error) {
                console.error('Erro na requisi√ß√£o:', error);
                document.getElementById('loading-container').style.display = 'none';
                showAlert('Erro na requisi√ß√£o GET: ' + error.message, 'danger');
            }
        }

        // Fun√ß√£o para executar POST
        async function executePost() {
            if (!window.selectedDataServer) {
                alert('Primeiro selecione um DataServer');
                return;
            }
            
            console.log('Executando POST para:', window.selectedDataServer);
            
            const requestBody = document.getElementById('postBody').value;
            const dataServerName = window.selectedDataServer.name;
            
            console.log('Nome do DataServer:', dataServerName);
            console.log('Body:', requestBody);
            
            if (!dataServerName) {
                alert('Nome do DataServer n√£o est√° definido');
                return;
            }
            
            if (!requestBody) {
                alert('Digite o JSON para enviar');
                return;
            }
            
            try {
                JSON.parse(requestBody);
            } catch (e) {
                alert('JSON inv√°lido');
                return;
            }
            
            try {
                document.getElementById('loading-container').style.display = 'block';
                
                // Obter o modo de execu√ß√£o
                const executionMode = document.getElementById('executionMode').value;
                
                const url = `/User/TestePOST?dataServerName=${encodeURIComponent(dataServerName)}&executionMode=${encodeURIComponent(executionMode)}`;
                console.log('URL da requisi√ß√£o:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: requestBody
                });
                
                const data = await response.json();
                
                console.log('Resposta da API:', data);
                
                document.getElementById('loading-container').style.display = 'none';
                
                if (data.success) {
                    document.getElementById('resultSection').style.display = 'block';
                    let displayHtml = `<pre>${data.data}</pre>`;
                    if (data.url) {
                        displayHtml = `<div class="mb-3"><strong>URL utilizada:</strong> ${data.url}</div>` + displayHtml;
                    }
                    document.getElementById('result').innerHTML = displayHtml;
                    showAlert('Requisi√ß√£o POST executada com sucesso!', 'success');
                } else {
                    showAlert('Erro na requisi√ß√£o POST: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('Erro na requisi√ß√£o:', error);
                document.getElementById('loading-container').style.display = 'none';
                showAlert('Erro na requisi√ß√£o POST: ' + error.message, 'danger');
            }
        }

        // Fun√ß√£o para preparar POST (nova funcionalidade)
        async function preparePost() {
            if (!window.selectedDataServer) {
                showAlert('Primeiro selecione um DataServer', 'danger');
                return;
            }
            
            console.log('Preparando POST para:', window.selectedDataServer);
            
            try {
                // Busca informa√ß√µes detalhadas do DataServer incluindo chaves prim√°rias
                const response = await fetch(`/TestRequests/GetDataServerInfo?dataServerName=${encodeURIComponent(window.selectedDataServer.name)}`);
                const result = await response.json();
                
                if (result.success) {
                    const dataServerInfo = result.data;
                    console.log('Informa√ß√µes do DataServer:', dataServerInfo);
                    
                    // Armazena as informa√ß√µes detalhadas
                    window.selectedDataServer.info = dataServerInfo;
                    
                    // Mostra a √°rea de prepara√ß√£o
                    document.getElementById('postOptions').style.display = 'none';
                    document.getElementById('jsonPreparationArea').style.display = 'block';
                    
                    // Gera os inputs para as chaves prim√°rias
                    generateJsonKeyInputs(dataServerInfo.primaryKeys, dataServerInfo.postExample);
                } else {
                    showAlert('Erro ao buscar informa√ß√µes do DataServer: ' + result.error, 'danger');
                }
            } catch (error) {
                console.error('Erro ao preparar POST:', error);
                showAlert('Erro ao preparar POST: ' + error.message, 'danger');
            }
        }

        // Fun√ß√µes para credenciais RM
        function testRMCredentials() {
            showAlert('Teste de credenciais RM (simulado)', 'info');
        }

        function clearRMCredentials() {
            document.getElementById('rmUsername').value = '';
            document.getElementById('rmPassword').value = '';
            document.getElementById('rmCodColigada').value = '1';
            showAlert('Credenciais removidas', 'info');
        }

        function saveRMCredentials() {
            showAlert('Credenciais salvas com sucesso!', 'success');
            const modal = bootstrap.Modal.getInstance(document.getElementById('rmCredentialsModal'));
            if (modal) modal.hide();
        }

        // Outras fun√ß√µes simplificadas...
        function generateJsonKeyInputs(primaryKeys, postExample) {
            const container = document.getElementById('json-inputs-container');
            
            if (!primaryKeys || primaryKeys.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i> 
                        Nenhuma chave prim√°ria definida para este DataServer.
                        <br><small>Voc√™ pode inserir o JSON manualmente na √°rea abaixo.</small>
                    </div>
                `;
                
                // Se h√° exemplo, coloca direto no textarea
                if (postExample) {
                    document.getElementById('prepared-json').value = formatJSON(postExample);
                }
                return;
            }
            
            let html = `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> 
                    Preencha os valores para as chaves prim√°rias do DataServer <strong>${window.selectedDataServer.name}</strong>
                    <br><small>Os valores ser√£o automaticamente mesclados com o JSON de exemplo do banco de dados.</small>
                </div>
                <div class="json-preparation-area">
                    <h6><i class="fas fa-key"></i> Chaves Prim√°rias</h6>
                    <div class="row">
            `;
            
            primaryKeys.forEach((key, index) => {
                html += `
                    <div class="col-md-6 mb-3">
                        <label for="key-${index}" class="form-label">
                            <strong>${key}</strong>
                            <span class="text-muted">(chave ${index + 1})</span>
                        </label>
                        <input type="text" 
                               id="key-${index}" 
                               class="form-control primary-key-input" 
                               data-key="${key}" 
                               placeholder="Digite o valor para ${key}"
                               onkeyup="updateJsonFromInputs()"
                               onfocus="this.style.borderLeftColor='#0056b3'"
                               onblur="this.style.borderLeftColor='#007bff'">
                    </div>
                `;
            });
            
            html += `
                    </div>
                    <div class="mt-3 text-center">
                        <button class="btn btn-outline-primary me-2" onclick="generateJsonFromKeys()">
                            <i class="fas fa-magic"></i> Atualizar JSON
                        </button>
                        ${postExample ? `
                        <button class="btn btn-outline-secondary me-2" onclick="resetToExample()">
                            <i class="fas fa-undo"></i> Resetar ao Exemplo
                        </button>
                        ` : ''}
                        <button class="btn btn-outline-info" onclick="clearAllInputs()">
                            <i class="fas fa-eraser"></i> Limpar Campos
                        </button>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
            
            // Armazena o exemplo para uso posterior
            if (postExample) {
                window.currentPostExample = postExample;
                // Carrega automaticamente o JSON de exemplo na textarea
                document.getElementById('prepared-json').value = formatJSON(postExample);
                showAlert('JSON de exemplo carregado! Preencha as chaves prim√°rias para personalizar.', 'info');
            }
        }

        function sendPreparedJson() {
            console.log('=== sendPreparedJson START ===');
            
            const jsonTextarea = document.getElementById('prepared-json');
            console.log('Elemento prepared-json encontrado:', jsonTextarea);
            console.log('Textarea existe:', jsonTextarea !== null);
            
            if (!jsonTextarea) {
                showAlert('Elemento de textarea n√£o encontrado!', 'danger');
                console.error('Elemento #prepared-json n√£o foi encontrado no DOM');
                return;
            }
            
            const jsonText = jsonTextarea.value;
            console.log('JSON Text Raw:', JSON.stringify(jsonText));
            console.log('JSON Text:', jsonText);
            console.log('JSON Length:', jsonText ? jsonText.length : 0);
            console.log('JSON Trim Length:', jsonText ? jsonText.trim().length : 0);
            
            if (!jsonText || jsonText.trim() === '') {
                showAlert('Digite o JSON para enviar', 'warning');
                console.warn('JSON est√° vazio ou s√≥ cont√©m espa√ßos em branco');
                return;
            }
            
            // Valida se √© um JSON v√°lido
            let parsedJson;
            try {
                parsedJson = JSON.parse(jsonText);
                console.log('JSON Parsed successfully:', parsedJson);
                console.log('JSON stringified back:', JSON.stringify(parsedJson));
                
                // Valida√ß√µes espec√≠ficas para o DataServer
                if (!window.selectedDataServer?.info?.primaryKeys || window.selectedDataServer.info.primaryKeys.length === 0) {
                    console.log('Nenhuma chave prim√°ria definida, enviando JSON como est√°');
                } else {
                    // Verifica se pelo menos uma chave prim√°ria foi preenchida
                    const primaryKeys = window.selectedDataServer.info.primaryKeys;
                    const hasAtLeastOneKey = primaryKeys.some(key => parsedJson.hasOwnProperty(key) && parsedJson[key] !== null && parsedJson[key] !== '');
                    
                    if (!hasAtLeastOneKey) {
                        showAlert('ATEN√á√ÉO: Nenhuma chave prim√°ria foi preenchida. Isso pode causar erro no RM.', 'warning');
                        if (!confirm('Deseja continuar mesmo assim?')) {
                            return;
                        }
                    }
                    
                    console.log('Chaves prim√°rias presentes no JSON:', primaryKeys.filter(key => parsedJson.hasOwnProperty(key)));
                }
                
            } catch (error) {
                showAlert('JSON inv√°lido: ' + error.message, 'danger');
                console.error('JSON Parse Error:', error);
                return;
            }
            
            // Log final do que ser√° enviado
            console.log('=== DADOS FINAIS PARA ENVIO ===');
            console.log('DataServer:', window.selectedDataServer?.name);
            console.log('JSON Final:', JSON.stringify(parsedJson, null, 2));
            console.log('Tamanho final:', JSON.stringify(parsedJson).length, 'caracteres');
            
            console.log('Chamando executePostWithJson...');
            // Executa o POST
            executePostWithJson(jsonText);
        }

        function formatJsonInTextarea() {
            const textarea = document.getElementById('prepared-json');
            const jsonText = textarea.value;
            
            if (!jsonText || jsonText.trim() === '') {
                showAlert('Nenhum JSON para formatar', 'warning');
                return;
            }
            
            try {
                const parsed = JSON.parse(jsonText);
                textarea.value = JSON.stringify(parsed, null, 2);
                showAlert('JSON formatado com sucesso!', 'success');
            } catch (error) {
                showAlert('Erro ao formatar JSON: ' + error.message, 'danger');
            }
        }

        function updateJsonFromInputs() {
            // Atualiza o JSON automaticamente quando o usu√°rio digita
            clearTimeout(window.updateJsonTimeout);
            window.updateJsonTimeout = setTimeout(() => {
                generateJsonFromKeys();
            }, 500); // Debounce de 500ms para melhor performance
        }

        function generateJsonFromKeys() {
            const inputs = document.querySelectorAll('.primary-key-input');
            const userValues = {};
            
            // Coleta os valores inseridos pelo usu√°rio
            inputs.forEach(input => {
                const key = input.getAttribute('data-key');
                const value = input.value.trim();
                if (value) {
                    // Mant√©m como string para preservar zeros √† esquerda e formata√ß√£o
                    // S√≥ converte para n√∫mero se n√£o come√ßar com zero ou n√£o cont√©m pontos/v√≠rgulas
                    if (value.startsWith('0') || value.includes('.') || value.includes(',')) {
                        userValues[key] = value; // Mant√©m como string
                    } else {
                        userValues[key] = isNaN(value) ? value : Number(value);
                    }
                }
            });
            
            console.log('Valores do usu√°rio:', userValues);
            
            // Se h√° JSON de exemplo, mescla com os valores do usu√°rio
            if (window.currentPostExample) {
                try {
                    // Parse do JSON exemplo
                    const exampleJson = typeof window.currentPostExample === 'string' ? 
                        JSON.parse(window.currentPostExample) : 
                        window.currentPostExample;
                    
                    console.log('JSON exemplo:', exampleJson);
                    
                    // Mescla os valores do usu√°rio com o exemplo
                    const mergedJson = { ...exampleJson, ...userValues };
                    
                    console.log('JSON mesclado:', mergedJson);
                    
                    const jsonText = JSON.stringify(mergedJson, null, 2);
                    document.getElementById('prepared-json').value = jsonText;
                    
                    if (Object.keys(userValues).length > 0) {
                        showAlert(`JSON gerado mesclando ${Object.keys(userValues).length} chave(s) prim√°ria(s) com o exemplo!`, 'success');
                    } else {
                        showAlert('JSON de exemplo carregado! Preencha as chaves prim√°rias para personalizar.', 'info');
                    }
                    
                } catch (error) {
                    console.error('Erro ao mesclar JSON:', error);
                    // Se der erro, usa apenas os valores do usu√°rio
                    const jsonText = JSON.stringify(userValues, null, 2);
                    document.getElementById('prepared-json').value = jsonText;
                    showAlert('Erro ao mesclar com exemplo. Usando apenas as chaves informadas.', 'warning');
                }
            } else {
                // Se n√£o h√° exemplo, usa apenas os valores do usu√°rio
                const jsonText = JSON.stringify(userValues, null, 2);
                document.getElementById('prepared-json').value = jsonText;
                
                if (Object.keys(userValues).length > 0) {
                    showAlert('JSON gerado das chaves prim√°rias!', 'success');
                } else {
                    showAlert('Preencha pelo menos uma chave prim√°ria.', 'warning');
                }
            }
        }

        function useExampleJson() {
            if (window.currentPostExample) {
                document.getElementById('prepared-json').value = formatJSON(window.currentPostExample);
                showAlert('JSON de exemplo recarregado! Preencha as chaves prim√°rias para personalizar.', 'info');
            } else {
                showAlert('Nenhum exemplo dispon√≠vel para este DataServer', 'warning');
            }
        }

        function resetToExample() {
            // Limpa todos os campos de input
            const inputs = document.querySelectorAll('.primary-key-input');
            inputs.forEach(input => {
                input.value = '';
            });
            
            // Recarrega o JSON de exemplo
            if (window.currentPostExample) {
                document.getElementById('prepared-json').value = formatJSON(window.currentPostExample);
                showAlert('Campos limpos e JSON resetado para o exemplo!', 'info');
            }
        }

        function clearAllInputs() {
            const inputs = document.querySelectorAll('.primary-key-input');
            inputs.forEach(input => {
                input.value = '';
            });
            
            // Se h√° exemplo, volta para o exemplo. Se n√£o, limpa tudo
            if (window.currentPostExample) {
                document.getElementById('prepared-json').value = formatJSON(window.currentPostExample);
                showAlert('Campos de chaves prim√°rias limpos! JSON mantido como exemplo.', 'info');
            } else {
                document.getElementById('prepared-json').value = '';
                showAlert('Todos os campos limpos!', 'info');
            }
        }

        async function executePostWithJson(jsonData) {
            console.log('=== executePostWithJson START ===');
            
            if (!window.selectedDataServer) {
                showAlert('DataServer n√£o selecionado', 'danger');
                console.error('selectedDataServer n√£o est√° definido');
                return;
            }
            
            console.log('DataServer Object:', window.selectedDataServer);
            console.log('DataServer Name:', window.selectedDataServer.name);
            console.log('JSON Data Type:', typeof jsonData);
            console.log('JSON Data:', jsonData);
            console.log('JSON Length:', jsonData ? jsonData.length : 0);
            console.log('JSON Raw (escaped):', JSON.stringify(jsonData));
            
            if (!jsonData || jsonData.trim() === '') {
                showAlert('JSON est√° vazio! Preencha os campos ou use o exemplo.', 'danger');
                console.error('JSON data est√° vazio ap√≥s trim');
                return;
            }
            
            try {
                document.getElementById('loading-container').style.display = 'block';
                
                // Obter o modo de execu√ß√£o
                const executionMode = document.getElementById('executionMode').value;
                
                // Se for modo local, tentar detectar RM local no browser do usu√°rio
                let localRMUrl = null;
                
                if (executionMode === 'local') {
                    console.log('üîç Detectando RM local no browser do usu√°rio para POST...');
                    showAlert('üîç Detectando RM local no seu computador...', 'info');
                    localRMUrl = await detectLocalRMInBrowser();
                    
                    if (!localRMUrl) {
                        document.getElementById('loading-container').style.display = 'none';
                        showAlert('‚ùå RM local n√£o detectado no seu computador. Verifique se o RM est√° executando localmente nas portas 8051, 8052 ou 8053.', 'danger');
                        return;
                    }
                    
                    console.log('‚úÖ RM local detectado para POST:', localRMUrl);
                    showAlert(`‚úÖ RM local detectado: ${localRMUrl}`, 'success');
                } else {
                    console.log('üåê Modo remoto selecionado para POST - usando servidor configurado');
                    showAlert('üåê Usando RM remoto (servidor)', 'info');
                }
                
                // Preparar dados para o novo endpoint
                const requestData = {
                    dataServerName: window.selectedDataServer.name,
                    postData: JSON.parse(jsonData), // Converter string para objeto JSON
                    executionMode: executionMode,
                    localRMUrl: localRMUrl
                };
                
                console.log('Dados da requisi√ß√£o POST:', requestData);
                
                const response = await fetch('/TestRequests/ExecutePost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                
                const result = await response.json();
                
                console.log('Resposta da API:', result);
                
                document.getElementById('loading-container').style.display = 'none';
                
                if (result.success) {
                    document.getElementById('resultSection').style.display = 'block';
                    
                    // Formata√ß√£o melhorada do JSON
                    let formattedData = result.data;
                    try {
                        // Se result.data √© uma string JSON, parse e reformate
                        if (typeof result.data === 'string') {
                            const parsedData = JSON.parse(result.data);
                            formattedData = JSON.stringify(parsedData, null, 2);
                        } else {
                            // Se j√° √© objeto, apenas stringify com formata√ß√£o
                            formattedData = JSON.stringify(result.data, null, 2);
                        }
                    } catch (e) {
                        // Se falhar, usa o valor original
                        formattedData = result.data;
                    }
                    
                    let displayHtml = `<pre style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; border: 1px solid #dee2e6;">${formattedData}</pre>`;
                    
                    // Mostra qual URL foi usada com informa√ß√µes detalhadas
                    let urlInfo = '';
                    if (result.executionDetails) {
                        urlInfo = ` | ${result.executionDetails}`;
                        displayHtml = `<div class="mb-3 alert alert-info"><strong>üìç Conex√£o utilizada:</strong> ${result.executionDetails}</div>` + displayHtml;
                    } else if (result.usedUrl && result.executionMode) {
                        const modeText = result.executionMode === 'local' ? 'RM Local' : 'RM Remoto';
                        urlInfo = ` | ${modeText}: ${result.usedUrl}`;
                        displayHtml = `<div class="mb-3 alert alert-info"><strong>üìç URL utilizada:</strong> ${result.usedUrl} (${modeText})</div>` + displayHtml;
                    } else if (result.usedUrl || result.url) {
                        const url = result.usedUrl || result.url;
                        urlInfo = ` | URL: ${url}`;
                        displayHtml = `<div class="mb-3 alert alert-info"><strong>üìç URL utilizada:</strong> ${url}</div>` + displayHtml;
                    }
                    
                    document.getElementById('result').innerHTML = displayHtml;
                    showAlert(`‚úÖ Requisi√ß√£o POST executada com sucesso!${urlInfo}`, 'success');
                } else {
                    showAlert('Erro na requisi√ß√£o POST: ' + (result.message || result.error || 'Erro desconhecido'), 'danger');
                }
            } catch (error) {
                console.error('Erro na requisi√ß√£o POST:', error);
                document.getElementById('loading-container').style.display = 'none';
                showAlert('Erro na requisi√ß√£o POST: ' + error.message, 'danger');
            }
        }

        function goBackToKeys() {
            document.getElementById('jsonPreparationArea').style.display = 'none';
            document.getElementById('postOptions').style.display = 'block';
        }

        function testTextareaContent() {
            console.log('=== TESTE TEXTAREA ===');
            const textarea = document.getElementById('prepared-json');
            console.log('Elemento:', textarea);
            console.log('Value:', textarea ? textarea.value : 'ELEMENTO N√ÉO ENCONTRADO');
            console.log('Value length:', textarea ? textarea.value.length : 0);
            console.log('Value trimmed length:', textarea ? textarea.value.trim().length : 0);
            
            if (textarea && textarea.value) {
                showAlert(`Textarea cont√©m ${textarea.value.length} caracteres (${textarea.value.trim().length} sem espa√ßos)`, 'info');
            } else {
                showAlert('Textarea est√° vazia ou n√£o foi encontrada!', 'warning');
            }
        }

        function validateJsonForDataServer() {
            const textarea = document.getElementById('prepared-json');
            if (!textarea || !textarea.value) {
                showAlert('Nenhum JSON para validar!', 'warning');
                return;
            }

            try {
                const jsonData = JSON.parse(textarea.value);
                console.log('=== VALIDA√á√ÉO DO JSON ===');
                console.log('JSON:', jsonData);
                
                let issues = [];
                let warnings = [];
                
                if (!window.selectedDataServer) {
                    issues.push('Nenhum DataServer selecionado');
                } else {
                    console.log('DataServer Info:', window.selectedDataServer.info);
                    
                    if (window.selectedDataServer.info?.primaryKeys) {
                        const primaryKeys = window.selectedDataServer.info.primaryKeys;
                        console.log('Chaves prim√°rias esperadas:', primaryKeys);
                        
                        // Verifica chaves prim√°rias
                        const missingKeys = primaryKeys.filter(key => !jsonData.hasOwnProperty(key));
                        const emptyKeys = primaryKeys.filter(key => jsonData.hasOwnProperty(key) && (jsonData[key] === null || jsonData[key] === ''));
                        
                        if (missingKeys.length > 0) {
                            warnings.push(`Chaves prim√°rias ausentes: ${missingKeys.join(', ')}`);
                        }
                        
                        if (emptyKeys.length > 0) {
                            warnings.push(`Chaves prim√°rias vazias: ${emptyKeys.join(', ')}`);
                        }
                        
                        if (missingKeys.length === primaryKeys.length) {
                            issues.push('NENHUMA chave prim√°ria foi preenchida');
                        }
                    }
                    
                    // Verifica se h√° exemplo para comparar
                    if (window.currentPostExample) {
                        try {
                            const exampleData = typeof window.currentPostExample === 'string' ? 
                                JSON.parse(window.currentPostExample) : window.currentPostExample;
                            
                            const exampleKeys = Object.keys(exampleData);
                            const jsonKeys = Object.keys(jsonData);
                            
                            const extraKeys = jsonKeys.filter(key => !exampleKeys.includes(key));
                            const missingFromExample = exampleKeys.filter(key => !jsonKeys.includes(key));
                            
                            if (extraKeys.length > 0) {
                                warnings.push(`Campos extras (n√£o no exemplo): ${extraKeys.join(', ')}`);
                            }
                            
                            if (missingFromExample.length > 0) {
                                warnings.push(`Campos do exemplo n√£o inclu√≠dos: ${missingFromExample.join(', ')}`);
                            }
                        } catch (e) {
                            warnings.push('Erro ao comparar com exemplo: ' + e.message);
                        }
                    }
                }
                
                // Monta o relat√≥rio
                let message = `‚úÖ JSON √© v√°lido com ${Object.keys(jsonData).length} campo(s)`;
                
                if (issues.length > 0) {
                    message += `\n\n‚ùå PROBLEMAS:\n${issues.map(i => '‚Ä¢ ' + i).join('\n')}`;
                }
                
                if (warnings.length > 0) {
                    message += `\n\n‚ö†Ô∏è AVISOS:\n${warnings.map(w => '‚Ä¢ ' + w).join('\n')}`;
                }
                
                const alertType = issues.length > 0 ? 'danger' : (warnings.length > 0 ? 'warning' : 'success');
                showAlert(message, alertType);
                
                console.log('Problemas encontrados:', issues);
                console.log('Avisos encontrados:', warnings);
                
            } catch (error) {
                showAlert('‚ùå JSON inv√°lido: ' + error.message, 'danger');
                console.error('Erro na valida√ß√£o:', error);
            }
        }

        function copyJsonToClipboard() {
            const textarea = document.getElementById('prepared-json');
            if (!textarea || !textarea.value) {
                showAlert('Nenhum JSON para copiar!', 'warning');
                return;
            }

            try {
                navigator.clipboard.writeText(textarea.value).then(() => {
                    showAlert('JSON copiado para a √°rea de transfer√™ncia!', 'success');
                }).catch(() => {
                    // Fallback para navegadores mais antigos
                    textarea.select();
                    document.execCommand('copy');
                    showAlert('JSON copiado para a √°rea de transfer√™ncia!', 'success');
                });
            } catch (error) {
                showAlert('Erro ao copiar JSON: ' + error.message, 'danger');
            }
        }

        function testJsonInPostman() {
            const textarea = document.getElementById('prepared-json');
            if (!textarea || !textarea.value) {
                showAlert('Nenhum JSON para testar!', 'warning');
                return;
            }

            if (!window.selectedDataServer) {
                showAlert('Nenhum DataServer selecionado!', 'warning');
                return;
            }

            // Cria instru√ß√µes detalhadas para testar no Postman
            const instructions = `
üìã INSTRU√á√ïES PARA TESTE NO POSTMAN:

üîó URL:
http://localhost:8051/rmsrestdataserver/rest/${window.selectedDataServer.name}

üîß M√©todo: POST

üìã Headers:
‚Ä¢ Content-Type: application/json
‚Ä¢ Authorization: Basic [suas_credenciais_base64]
‚Ä¢ CODCOLIGADA: 1

üìÑ Body (raw JSON):
${textarea.value}

üí° DICAS:
1. Para gerar o Basic Auth, use: btoa("usuario:senha")
2. Certifique-se que o RM est√° rodando na porta 8051
3. Use exatamente o mesmo JSON que est√° na textarea
4. Compare o resultado com o que o sistema retorna

üìã O JSON foi copiado para a √°rea de transfer√™ncia!
            `;

            // Copia o JSON e mostra as instru√ß√µes
            navigator.clipboard.writeText(textarea.value).then(() => {
                alert(instructions);
            }).catch(() => {
                // Fallback
                textarea.select();
                document.execCommand('copy');
                alert(instructions);
            });
        }

        function backToMain() {
            location.reload();
        }

        function saveResult() {
            showAlert('Resultado salvo (simulado)', 'success');
        }

        function saveJsonLocally() {
            const jsonText = document.getElementById('prepared-json').value;
            
            if (!jsonText || jsonText.trim() === '') {
                showAlert('Nenhum JSON para salvar', 'warning');
                return;
            }
            
            try {
                // Valida se √© um JSON v√°lido
                const parsedJson = JSON.parse(jsonText);
                
                // Salva no sessionStorage para persistir durante a sess√£o
                const timestamp = new Date().toISOString();
                const saveKey = `savedJson_${window.selectedDataServer?.name || 'unknown'}_${timestamp}`;
                
                const savedData = {
                    dataServer: window.selectedDataServer?.name || 'unknown',
                    timestamp: timestamp,
                    json: parsedJson,
                    jsonText: jsonText
                };
                
                sessionStorage.setItem(saveKey, JSON.stringify(savedData));
                
                // Tamb√©m salva uma refer√™ncia na lista de JSONs salvos
                const savedJsonsList = JSON.parse(sessionStorage.getItem('savedJsonsList') || '[]');
                savedJsonsList.push({
                    key: saveKey,
                    dataServer: window.selectedDataServer?.name || 'unknown',
                    timestamp: timestamp,
                    preview: jsonText.substring(0, 100) + (jsonText.length > 100 ? '...' : '')
                });
                
                // Mant√©m apenas os √∫ltimos 10 JSONs salvos
                if (savedJsonsList.length > 10) {
                    const oldestKey = savedJsonsList.shift().key;
                    sessionStorage.removeItem(oldestKey);
                }
                
                sessionStorage.setItem('savedJsonsList', JSON.stringify(savedJsonsList));
                
                showAlert(`JSON salvo com sucesso! (${timestamp})`, 'success');
                console.log('JSON salvo:', savedData);
                
            } catch (error) {
                showAlert('Erro ao salvar JSON: ' + error.message, 'danger');
                console.error('Erro ao salvar JSON:', error);
            }
        }

        // Fun√ß√£o utilit√°ria para formatar JSON
        function formatJSON(jsonString) {
            try {
                if (typeof jsonString === 'object') {
                    return JSON.stringify(jsonString, null, 2);
                }
                const parsed = JSON.parse(jsonString);
                return JSON.stringify(parsed, null, 2);
            } catch (error) {
                console.error('Erro ao formatar JSON:', error);
                return jsonString;
            }
        }

        // Inicializa√ß√£o
        $(document).ready(function() {
            // Configura event listeners dos bot√µes
            document.getElementById('redetectRMBtn').addEventListener('click', redetectRM);
            document.getElementById('showRMStatusBtn').addEventListener('click', showRMStatus);
            document.getElementById('selectDataServerBtn').addEventListener('click', selectDataServer);
            document.getElementById('showGetOptionsBtn').addEventListener('click', showGetOptions);
            document.getElementById('showPostOptionsBtn').addEventListener('click', showPostOptions);
            
            // Executa a inicializa√ß√£o das fun√ß√µes
            setTimeout(async () => {
                await loadEnvironmentInfo();
                await redetectRM();
            }, 100);
        });
    </script>
</body>
</html>
